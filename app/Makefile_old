CC=$(BR_DIR)/output/host/usr/bin/arm-linux-gcc
CFLAGS=

#Create Variables to Each Directory of the Project
BINDIR = bin
SRCDIR = src
OBJDIR = obj
LIBDIR = lib
DOCDIR = doc
HDRDIR = include

#Get Only the Internal Structure of SRCDIR Recursively
STRUCTURE := $(shell find $(SRCDIR) -type d)

#Get All Files inside the STRUCTURE Variable
CODEFILES := $(addsuffix /*,$(STRUCTURE))
CODEFILES := $(wildcard $(CODEFILES))

# Filter Only Specific Files
SRCFILES := $(filter %.c,$(CODEFILES))
HDRFILES := $(filter %.h,$(CODEFILES))
OBJFILES := $(subst $(SRCDIR),$(OBJDIR),$(SRCFILES:%.c=%.o))

# Filter Out Function main for Libraries
LIBDEPS := $(filter-out $(OBJDIR)/main.o,$(OBJFILES))

out_file := app

.PHONY: $(out_file) $(OBJDIR)/%.o #To avoid implicit rules

compile: check_settings $(BINDIR)/$(out_file)

#Linker step:
$(BINDIR)/$(out_file): $(OBJFILES) #To create an "app" file from .o files
	$(CC) $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS) -o $@

#Make hearder files the requisites of source files, to force recompilation
# $(SRCDIR)/%.c:$(HDRDIR)/%.h
# 	@echo $<
# 	@echo $@

#Compilation step (#To create .o files from .c and .h files)
$(OBJDIR)/%.o: $(addprefix $(SRCDIR)/,%.c) $(addprefix $(HDRDIR)/,%.h)
	$(CC) -c $< -o $@ $(CFLAGS)

#send files to target:
send_to_target:
	# scp $(out_file) root@$(IP):/root

send_modules_to_target:
	# scp ./*.ko root@$(IP):/root

#To compile modules:
host_modules:
	make -C /home/cmrivera/WSL2-Linux-Kernel M=$(PWD) modules

target_modules:
	make ARCH=arm CROSS_COMPILE=arm-linux- -C $(BR_DIR)/output/build/linux-5.17.15 \
	M=$(PWD) modules

#Check for settings file's variables
check_settings:
ifeq ($(BR_DIR),)
	@echo "Error, "settings.sh" file has not been run."
	exit 1
endif

#Clean procedure
clean:
	rm -f ./*.mod* ./*.ko ./*.symvers ./*.order ./*.o ./$(out_file)
	rm -f $(OBJDIR)/*
	rm -f $(BINDIR)/*
	rm -f ./src/*o